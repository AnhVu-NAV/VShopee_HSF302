package com.hsf302.he186049.vshopee.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.hsf302.he186049.vshopee.entity.*;
import com.hsf302.he186049.vshopee.repository.BillRepository;
import com.hsf302.he186049.vshopee.repository.ProductRepository;
import com.hsf302.he186049.vshopee.repository.UserRepository;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class OpenAiService {

    private static final String API_URL = "https://api.openai.com/v1/chat/completions";

    private final String apiKey = "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"; // Ho·∫∑c inject t·ª´ @Value nh∆∞ c≈© n·∫øu ƒë√£ ho·∫°t ƒë·ªông
    private final ProductRepository productRepository;
    private final CartService cartService;
    private final HttpSession session;
    private final UserRepository userRepository;
    private final BillService billService;
    private final OrderService orderService;
    private final BillRepository billRepository;


    public String chat(String message) {
        RestTemplate restTemplate = new RestTemplate();

        // 1. L·∫•y danh s√°ch s·∫£n ph·∫©m
        List<Product> products = productRepository.findAll();
        String productList = products.stream()
                .map(p -> p.getName() + " - " + p.getDescription())
                .collect(Collectors.joining("\n"));

        // 2. Prompt h·ªá th·ªëng
        String systemPrompt = """
                B·∫°n l√† m·ªôt chatbot h·ªó tr·ª£ t∆∞ v·∫•n mua h√†ng.
                Danh s√°ch d∆∞·ªõi ƒë√¢y l√† c√°c s·∫£n ph·∫©m ƒëang b√°n tr√™n website. N·∫øu ng∆∞·ªùi d√πng mu·ªën mua hay th√™m s·∫£n ph·∫©m n√†o v√†o gi·ªè h√†ng, b·∫°n ch·ªâ c·∫ßn tr·∫£ l·ªùi t√™n s·∫£n ph·∫©m v√† kh·∫≥ng ƒë·ªãnh ƒë√£ th√™m.
                N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ th√¨ cung c·∫•p m√¥ t·∫£ ng·∫Øn g·ªçn, kh√¥ng c·∫ßn h·ªèi l·∫°i.
                DANH S√ÅCH S·∫¢N PH·∫®M:
                """ + productList;

        // 3. G·ªçi GPT API
        Map<String, Object> requestBody = Map.of(
                "model", "gpt-3.5-turbo",
                "messages", List.of(
                        Map.of("role", "system", "content", systemPrompt),
                        Map.of("role", "user", "content", message)
                )
        );

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth(apiKey);

        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
        ResponseEntity<JsonNode> response = restTemplate.postForEntity(API_URL, entity, JsonNode.class);

        String reply = response.getBody()
                .get("choices").get(0)
                .get("message").get("content")
                .asText();

        // 4. T√¨m s·∫£n ph·∫©m trong ph·∫£n h·ªìi
        String finalReply = reply;
        Optional<Product> matchedProduct = products.stream()
                .filter(p -> finalReply.toLowerCase().contains(p.getName().toLowerCase()))
                .findFirst();

        // 5. N·∫øu ng∆∞·ªùi d√πng mu·ªën mua ‚Üí th√™m v√†o gi·ªè h√†ng
        if ((message.toLowerCase().contains("mua") || message.toLowerCase().contains("gi·ªè"))
                && matchedProduct.isPresent()) {

            Product product = matchedProduct.get();

            User user = (User) session.getAttribute("user");
            if (user != null) {
                CartSession sessionCart = getCartFromSession(session);
                sessionCart.addItem(product, 1);
                cartService.syncSessionCartToDB(sessionCart, user);

                reply += "\n\n‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m **" + product.getName() + "** v√†o gi·ªè h√†ng c·ªßa b·∫°n.";
            } else {
                reply += "\n\n‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.";
            }
        }

        // 6. N·∫øu ng∆∞·ªùi d√πng mu·ªën xem ƒë∆°n h√†ng g·∫ßn ƒë√¢y
        if (message.toLowerCase().contains("ƒë∆°n h√†ng g·∫ßn ƒë√¢y")) {
            User user = (User) session.getAttribute("user");
            List<Bill> bills = billService.getRecentBills(user);
            if (bills.isEmpty()) return "B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o g·∫ßn ƒë√¢y.";

            StringBuilder sb = new StringBuilder("üì¶ ƒê√¢y l√† 3 ƒë∆°n h√†ng g·∫ßn ƒë√¢y c·ªßa b·∫°n:\n");
            for (Bill bill : bills) {
                sb.append("- M√£ ƒë∆°n: ").append(bill.getOrder().getId())
                        .append(" | Ng√†y: ").append(new SimpleDateFormat("dd/MM/yyyy").format(bill.getCreatedDate()))
                        .append(" | Tr·∫°ng th√°i: ").append(bill.getStatus()).append("\n");
            }
            return sb.toString();
        }

        // 7. Tra c·ª©u tr·∫°ng th√°i ƒë∆°n h√†ng theo m√£ ƒë∆°n
        if (message.toLowerCase().matches(".*(m√£|ƒë∆°n)[^0-9]*(\\d+).*")) {
            // Tr√≠ch xu·∫•t m√£ ƒë∆°n t·ª´ tin nh·∫Øn
            Matcher matcher = Pattern.compile(".*?(\\d{1,6}).*").matcher(message);
            if (matcher.find()) {
                int orderId = Integer.parseInt(matcher.group(1));
                Optional<Order> orderOpt = orderService.findById(orderId);

                if (orderOpt.isPresent()) {
                    Order order = orderOpt.get();
                    Optional<Bill> bill = billRepository.findByOrder(order); // c·∫ßn vi·∫øt method n√†y

                    return "üîç ƒê∆°n h√†ng #" + orderId +
                            " ƒë∆∞·ª£c t·∫°o ng√†y " + new SimpleDateFormat("dd/MM/yyyy").format(bill.get().getCreatedDate()) +
                            " v·ªõi tr·∫°ng th√°i: **" + bill.get().getStatus().name() + "**.";
                } else {
                    return "‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£: " + orderId;
                }
            }
        }

        return reply;
    }

    private CartSession getCartFromSession(HttpSession session) {
        CartSession sessionCart = (CartSession) session.getAttribute("cart");
        if (sessionCart == null) {
            sessionCart = new CartSession();
            session.setAttribute("cart", sessionCart);
        }
        return sessionCart;
    }
}
